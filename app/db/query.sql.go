// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (
  first_name, last_name
) VALUES (
  ?, ?
)
RETURNING id, first_name, last_name
`

type CreatePatientParams struct {
	FirstName string
	LastName  string
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, createPatient, arg.FirstName, arg.LastName)
	var i Patient
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const listPatients = `-- name: ListPatients :many
SELECT id, first_name, last_name FROM patients
ORDER BY id
`

func (q *Queries) ListPatients(ctx context.Context) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, listPatients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(&i.ID, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
